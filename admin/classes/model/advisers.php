<?php/** * Модель для консультантов * * @author sokol * @package btlady * @subpackage admin */class Model_Advisers extends Model_Common {    private $grid;	public static $self;		public function __construct()    {        parent::__construct();        require_once $this->pathDhtmlx . 'grid_connector.php';        $this->grid = new GridConnector($this->connection);        $this->grid->event->attach('afterProcessing', array('Model_Advisers', 'clearBannerCache'));        $this->grid->dynamic_loading(30);		$this->grid->enable_log($this->connectorLog, true);		self::$self = $this;    }		public function getAllSpecialties()	{		$sql = "SELECT id, name FROM specialities ORDER BY name";		return $this->fetchAll($sql);	}		public function getAdvisersList($year = 0, $month = 0, $sp_id = 0, $ans = 'all')	{		$userInSpecilty = "			SELECT u.user_id 			FROM users u 			LEFT JOIN consultants c ON c.id = u.user_id			WHERE c.speciality_id = {$sp_id}";				$sql = 			" SELECT u.user_id, GROUP_CONCAT(distinct s.name SEPARATOR ', ') specialty, CONCAT_WS(' ', d.sname, d.name, d.fname) name, " .				" u.user_regdate regdate, IFNULL(d.answers, 0) answers, IFNULL(d.rating, 0.00) rating, " .				" CONCAT_WS(' ', u.user_email, d.phone) contacts, " .				" '' link, 0 mark, GROUP_CONCAT(s.id SEPARATOR ',') sp_ids, d.sname, d.name dname, d.fname, u.city_id, rg.country_id, " .				" u.user_email, d.phone, d.diploma, d.description, u.username " .			" FROM roles_users ru " .			" LEFT JOIN roles r ON r.id = ru.role_id " .			" LEFT JOIN consultants c ON c.id = ru.user_id " .			" LEFT JOIN specialities s ON s.id = c.speciality_id " .			" LEFT JOIN users u ON u.user_id = ru.user_id " .			" LEFT JOIN doctors d ON d.u_id = ru.user_id " .			" LEFT JOIN answers a ON ru.user_id = a.doctor_id " .			" LEFT JOIN cities ct ON ct.id = u.city_id " .			" LEFT JOIN regions rg ON rg.id = ct.region_id " .			" WHERE r.name = 'consult' " .			($year ? " AND year(a.date) = {$year} " : "") .			($month ? " AND month(a.date) = {$month} " : "") .			($sp_id ? " AND ru.user_id IN ({$userInSpecilty}) " : "") .			($ans == "withans" ? " AND d.answers > 0 " : "") .			($ans == "noans" ? " AND d.answers  = 0 " : "") .			" GROUP by ru.user_id ";					$sql = "SELECT tbl.* FROM ({$sql}) tbl WHERE 1=1";					function beforeRender($action)		{			$user_id = $action->get_value('user_id');						$action->set_value("regdate", date("Y-m-d", $action->get_value("regdate")));			$action->set_value("link", "<a href=\"/user/{$user_id}/\" target=\"_blank\">Профайл</a>");		}				function beforeUpdate($action)		{			$self = Model_Advisers::$self;			$user_id = $action->get_value('user_id');						if(!$self->doesAdviserExist($user_id))			{				if(!$self->addAdviser($user_id))				{					$action->error();					return;				}			}						$self->updateAdviserInfo($action);			$self->updateAdviserSpecialty($action);						$action->success();		}				$this->grid->event->attach('beforeRender', 'beforeRender');		$this->grid->event->attach('beforeUpdate', 'beforeUpdate');				$this->grid->render_sql($sql, 'user_id', 'mark, user_id, username, specialty, name, regdate, answers, rating, contacts, link, sp_ids, sname, dname, fname, ' .			' city_id, country_id, user_email, phone, diploma, description');	}		public function updateAdviserSpecialty($action)	{		$ids = array_filter(explode(',', $action->get_value('sp_ids')));		$user_id = (int) $action->get_value('user_id');				$deleteSQL = "DELETE FROM consultants WHERE id = :user_id";		$insertSQL = "INSERT INTO consultants (id, speciality_id) VALUES ";				DB::query(Database::DELETE, $deleteSQL)->parameters(array(':user_id' => $user_id))->execute();				if($ids)		{			$sub_query = array();			foreach($ids as $id)				$sub_query[] = "({$user_id}, {$id})";							$insertSQL .= implode(',', $sub_query);						DB::query(Database::INSERT, $insertSQL)->execute();		}	}		public function updateAdviserInfo($action)	{		$user_id = $action->get_value('user_id');		$city_id = $action->get_value('city_id');		$email = $action->get_value('user_email');		$sname = $action->get_value('sname');		$name = $action->get_value('dname');		$fname = $action->get_value('fname');		$phone = $action->get_value('phone');		$description = $action->get_value('description');		$diploma = $action->get_value('diploma');				$updateUserSQL = "			UPDATE users 			SET user_email = :email,				city_id = :city_id			WHERE user_id = :user_id";				$updateDoctorSQL = "			UPDATE doctors			SET sname = :sname,				name = :name,				fname = :fname,				phone = :phone,				description = :description,				diploma = :diploma			WHERE u_id = :u_id";					$resultUser = DB::query(Database::UPDATE, $updateUserSQL)->parameters(			array(				':user_id' => $user_id,				':email' => $email,				':city_id' => $city_id			)		)->execute();				$resultDoc = DB::query(Database::UPDATE, $updateDoctorSQL)->parameters(			array(				':sname' => $sname,				':name' => $name,				':fname' => $fname,				':phone' => $phone,				':description' => $description,				':diploma' => $diploma,				':u_id' => $user_id			)		)->execute();	}		public function addAdviser($user_id)	{		$sql = "INSERT INTO doctors (u_id) VALUES (:user_id)";		$result = DB::query(Database::INSERT, $sql)->parameters(array(':user_id' => $user_id))->execute();				if($result)		{			//inserted id			if($result[0])				return true;		}				return false;	}		public function doesAdviserExist($user_id)	{		$user_id = (int) $user_id;		$sql = "SELECT * FROM doctors WHERE u_id = {$user_id}";		$adviser = $this->fetchAll($sql);		if($adviser)			return true;					return false;	}		public function getAnswersByMonth($year, $adv_id, $sp_id = false)	{		$sql = "			SELECT count(a.id) ans_count, MONTH(a.date) month			FROM answers a			LEFT JOIN questions q ON q.id = a.question_id			WHERE a.doctor_id = :doctor_id " .			($year ? " AND YEAR(a.date) = :year " : '') . 			($sp_id ? " AND q.section_id = :sp_id " : '') . "			GROUP BY MONTH(a.date)			ORDER BY month";				$query = DB::query(Database::SELECT, $sql)->parameters(			array(				':doctor_id' => $adv_id,				':year' => $year,				':sp_id' => $sp_id			)		);		return $query->execute()->as_array();	}		public function getAdviserAnswers($adv_id)	{		$this->adv_id = intval($adv_id);		function beforeFilter($action)		{			$action->add("doctor_id", Model_Advisers::$self->adv_id, "=");		}		$this->grid->event->attach('beforeFilter', 'beforeFilter');		$this->grid->render_table('answers', 'id', 'id, question_id, date, body');	}		public function getAdvisersEmailsById($ids)	{		$user_ids = array();		foreach($ids as $id)			if(intval($id))				$user_ids[] = intval($id);				$sql = "			SELECT user_email email			FROM users 			WHERE user_id IN (" . implode(',', $user_ids) . ")";					if($user_ids)		{			$result = $this->fetchAll($sql);			if($result)			{				$emails = array();				foreach($result as $r)				{					$emails[] = $r['email'];				}								return $emails;			}		}					return null;	}		public function getCountries()	{		$sql = "SELECT id, name FROM countries ORDER BY name";		return $this->fetchAll($sql);	}		public function getCityByCountryId($country_id)	{		$sql = "			SELECT c.id, c.name			FROM cities c			LEFT JOIN regions r ON c.region_id = r.id			WHERE r.country_id = :country_id			ORDER BY c.name";					return DB::query(Database::SELECT, $sql)->parameters(array(':country_id' => $country_id))->execute()->as_array();	}		public function updateAdvPhoto($photo, $u_id)	{		if(!$this->doesAdviserExist($u_id))		{			if(!$this->addAdviser($u_id))			{				return false;			}		}					$sql = "			UPDATE doctors			SET photo = :photo			WHERE u_id = :u_id";					return DB::query(Database::UPDATE, $sql)->parameters(			array(				':photo' => $photo,				':u_id' => $u_id			)		)->execute();	}		public function getAdvPhoto($u_id)	{		$u_id = intval($u_id);		$sql = "SELECT photo FROM doctors WHERE u_id = {$u_id}";		$result = $this->fetchAll($sql);				if($result)			return $result[0]['photo'];					return false;	}		public function getAdvDiplomas($u_id)	{		$u_id = intval($u_id);		$diplomas = array();				$sql = "			SELECT dp.photo, dp.id			FROM diploma_photos dp			LEFT JOIN doctors d ON d.id = dp.d_id			WHERE d.u_id = {$u_id}";					return $this->fetchAll($sql);	}		public function addDiplomaPhoto($fname, $u_id)	{		if(!$this->doesAdviserExist($u_id))		{			if(!$this->addAdviser($u_id))			{				return false;			}		}				$sql = "INSERT INTO diploma_photos (d_id, photo) VALUES((SELECT id FROM doctors WHERE u_id = :u_id), :photo)";		$result = DB::query(Database::INSERT, $sql)->parameters(			array(				':u_id' => $u_id,				':photo' => $fname			)		)->execute();				return $result[0];	}		public function rmDiplomaPhoto($u_id, $ph_id)	{		$sql = "DELETE FROM diploma_photos WHERE id = :ph_id AND d_id = (SELECT id FROM doctors WHERE u_id = :u_id)";				return DB::query(Database::DELETE, $sql)->parameters(			array(				':ph_id' => $ph_id,				':u_id' => $u_id			)		)->execute();		}		public static function clearBannerCache()	{		}}